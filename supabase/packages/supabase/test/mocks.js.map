{"version":3,"file":"mocks.js","sourceRoot":"","sources":["mocks.ts"],"names":[],"mappings":"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","sourcesContent":["import { PGlite, type PGliteInterface } from '@electric-sql/pglite';\r\nimport { source } from 'common-tags';\r\nimport { format } from 'date-fns';\r\nimport { buildSchema, parse, validate } from 'graphql';\r\nimport { http, HttpResponse } from 'msw';\r\nimport { customAlphabet } from 'nanoid';\r\nimport { join } from 'node:path/posix';\r\nimport { expect } from 'vitest';\r\nimport { z } from 'zod';\r\nimport packageJson from '../package.json' with { type: 'json' };\r\nimport {\r\n  getQueryFields,\r\n  graphqlRequestSchema,\r\n} from '../src/content-api/graphql.js';\r\nimport { getDeploymentId, getPathPrefix } from '../src/edge-function.js';\r\nimport type { components } from '../src/management-api/types.js';\r\nimport { TRACE_URL } from '../src/regions.js';\r\n\r\nconst { version } = packageJson;\r\n\r\nconst nanoid = customAlphabet('abcdefghijklmnopqrstuvwxyz', 20);\r\n\r\nexport const API_URL = 'https://api.supabase.com';\r\nexport const CONTENT_API_URL = 'https://supabase.com/docs/api/graphql';\r\nexport const MCP_SERVER_NAME = 'supabase-mcp';\r\nexport const MCP_SERVER_VERSION = version;\r\nexport const MCP_CLIENT_NAME = 'test-client';\r\nexport const MCP_CLIENT_VERSION = '1.0.0';\r\nexport const ACCESS_TOKEN = 'dummy-token';\r\nexport const COUNTRY_CODE = 'US';\r\nexport const CLOSEST_REGION = 'us-east-2';\r\n\r\nexport const contentApiMockSchema = source`\r\n  schema {\r\n    query: RootQueryType\r\n  }\r\n    \r\n  type RootQueryType {\r\n    \"\"\"Get the GraphQL schema for this endpoint\"\"\"\r\n    schema: String!\r\n\r\n    \"\"\"Search the Supabase docs for content matching a query string\"\"\"\r\n    searchDocs(query: String!, limit: Int): SearchResultCollection\r\n  }\r\n\r\n  \"\"\"Document that matches a search query\"\"\"\r\n  interface SearchResult {\r\n    \"\"\"The title of the matching result\"\"\"\r\n    title: String\r\n\r\n    \"\"\"The URL of the matching result\"\"\"\r\n    href: String\r\n\r\n    \"\"\"The full content of the matching result\"\"\"\r\n    content: String\r\n  }\r\n\r\n  \"\"\"A collection of search results containing content from Supabase docs\"\"\"\r\n  type SearchResultCollection {\r\n    \"\"\"A list of edges containing nodes in this collection\"\"\"\r\n    edges: [SearchResultEdge!]!\r\n\r\n    \"\"\"The nodes in this collection, directly accessible\"\"\"\r\n    nodes: [SearchResult!]!\r\n  }\r\n\r\n  \"\"\"An edge in a collection of SearchResults\"\"\"\r\n  type SearchResultEdge {\r\n    \"\"\"The SearchResult at the end of the edge\"\"\"\r\n    node: SearchResult!\r\n  }\r\n`;\r\n\r\ntype Organization = components['schemas']['V1OrganizationSlugResponse'];\r\ntype Project = components['schemas']['V1ProjectWithDatabaseResponse'];\r\ntype Branch = components['schemas']['BranchResponse'];\r\n\r\nexport type Migration = {\r\n  version: string;\r\n  name: string;\r\n  query: string;\r\n};\r\n\r\nexport const mockOrgs = new Map<string, Organization>();\r\nexport const mockProjects = new Map<string, MockProject>();\r\nexport const mockBranches = new Map<string, MockBranch>();\r\n\r\nexport const mockContentApi = [\r\n  http.post(CONTENT_API_URL, async ({ request }) => {\r\n    const json = await request.json();\r\n    const { query } = graphqlRequestSchema.parse(json);\r\n\r\n    const schema = buildSchema(contentApiMockSchema);\r\n    const document = parse(query);\r\n    const validationErrors = validate(schema, document);\r\n\r\n    const [queryName] = getQueryFields(document);\r\n\r\n    if (queryName === 'schema') {\r\n      return HttpResponse.json({\r\n        data: {\r\n          schema: contentApiMockSchema,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (validationErrors.length > 0) {\r\n      throw Error('Invalid query made to Content API');\r\n    }\r\n\r\n    return HttpResponse.json({\r\n      data: {\r\n        dummy: true,\r\n      },\r\n    });\r\n  }),\r\n];\r\n\r\nexport const mockManagementApi = [\r\n  http.get(TRACE_URL, () => {\r\n    return HttpResponse.text(\r\n      `fl=123abc\\nvisit_scheme=https\\nloc=${COUNTRY_CODE}\\ntls=TLSv1.3\\nhttp=http/2`\r\n    );\r\n  }),\r\n\r\n  /**\r\n   * Check authorization\r\n   */\r\n  http.all(`${API_URL}/*`, ({ request }) => {\r\n    const authHeader = request.headers.get('Authorization');\r\n\r\n    const accessToken = authHeader?.replace('Bearer ', '');\r\n    if (accessToken !== ACCESS_TOKEN) {\r\n      return HttpResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n    }\r\n  }),\r\n\r\n  /**\r\n   * Check user agent\r\n   */\r\n  http.all(`${API_URL}/*`, ({ request }) => {\r\n    const userAgent = request.headers.get('user-agent');\r\n    expect(userAgent).toBe(\r\n      `${MCP_SERVER_NAME}/${MCP_SERVER_VERSION} (${MCP_CLIENT_NAME}/${MCP_CLIENT_VERSION})`\r\n    );\r\n  }),\r\n\r\n  /**\r\n   * List all projects\r\n   */\r\n  http.get(`${API_URL}/v1/projects`, () => {\r\n    return HttpResponse.json(\r\n      Array.from(mockProjects.values()).map((project) => project.details)\r\n    );\r\n  }),\r\n\r\n  /**\r\n   * Get details for a project\r\n   */\r\n  http.get<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      return HttpResponse.json(project.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Create a new project\r\n   */\r\n  http.post(`${API_URL}/v1/projects`, async ({ request }) => {\r\n    const bodySchema = z.object({\r\n      name: z.string(),\r\n      region: z.string(),\r\n      organization_id: z.string(),\r\n      db_pass: z.string(),\r\n    });\r\n    const body = await request.json();\r\n    const { name, region, organization_id } = bodySchema.parse(body);\r\n\r\n    const project = await createProject({\r\n      name,\r\n      region,\r\n      organization_id,\r\n    });\r\n\r\n    const { database, ...projectResponse } = project.details;\r\n\r\n    return HttpResponse.json(projectResponse);\r\n  }),\r\n\r\n  /**\r\n   * Pause a project\r\n   */\r\n  http.post<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/pause`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { error: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      project.status = 'INACTIVE';\r\n      return HttpResponse.json(project.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Restore a project\r\n   */\r\n  http.post<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/restore`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { error: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      project.status = 'ACTIVE_HEALTHY';\r\n      return HttpResponse.json(project.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * List organizations\r\n   */\r\n  http.get(`${API_URL}/v1/organizations`, () => {\r\n    return HttpResponse.json(\r\n      Array.from(mockOrgs.values()).map(({ id, name }) => ({ id, name }))\r\n    );\r\n  }),\r\n\r\n  /**\r\n   * Get details for an organization\r\n   */\r\n  http.get(`${API_URL}/v1/organizations/:id`, ({ params }) => {\r\n    const organization = Array.from(mockOrgs.values()).find(\r\n      (org) => org.id === params.id\r\n    );\r\n    return HttpResponse.json(organization);\r\n  }),\r\n\r\n  /**\r\n   * Get the API keys for a project\r\n   */\r\n  http.get(`${API_URL}/v1/projects/:projectId/api-keys`, ({ params }) => {\r\n    return HttpResponse.json([\r\n      {\r\n        name: 'anon',\r\n        api_key: 'dummy-anon-key',\r\n      },\r\n    ]);\r\n  }),\r\n\r\n  /**\r\n   * Execute a SQL query on a project's database\r\n   */\r\n  http.post<{ projectId: string }, { query: string; read_only?: boolean }>(\r\n    `${API_URL}/v1/projects/:projectId/database/query`,\r\n    async ({ params, request }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      const { db } = project;\r\n      const { query, read_only } = await request.json();\r\n\r\n      // Not secure, but good enough for testing\r\n      const wrappedQuery = `\r\n        SET ROLE ${read_only ? 'supabase_read_only_role' : 'postgres'};\r\n        ${query};\r\n        RESET ROLE;\r\n      `;\r\n\r\n      const statementResults = await db.exec(wrappedQuery);\r\n\r\n      // Remove last result, which is for the \"RESET ROLE\" statement\r\n      statementResults.pop();\r\n\r\n      const lastStatementResults = statementResults.at(-1);\r\n\r\n      if (!lastStatementResults) {\r\n        return HttpResponse.json(\r\n          { message: 'Failed to execute query' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json(lastStatementResults.rows);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Lists all Edge Functions for a project\r\n   */\r\n  http.get<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/functions`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json(\r\n        Array.from(project.edge_functions.values()).map(\r\n          (edgeFunction) => edgeFunction.details\r\n        )\r\n      );\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get details for an Edge Function\r\n   */\r\n  http.get<{ projectId: string; functionSlug: string }>(\r\n    `${API_URL}/v1/projects/:projectId/functions/:functionSlug`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const edgeFunction = project.edge_functions.get(params.functionSlug);\r\n\r\n      if (!edgeFunction) {\r\n        return HttpResponse.json(\r\n          { message: 'Edge Function not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json(edgeFunction.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Gets the files for an Edge Function\r\n   */\r\n  http.get<{ projectId: string; functionSlug: string }>(\r\n    `${API_URL}/v1/projects/:projectId/functions/:functionSlug/body`,\r\n    ({ params, request }) => {\r\n      if (request.headers.get('Accept') !== 'multipart/form-data') {\r\n        return HttpResponse.json(\r\n          {\r\n            message:\r\n              'Invalid Accept header. Must be multipart/form-data for testing',\r\n          },\r\n          { status: 406 }\r\n        );\r\n      }\r\n\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const edgeFunction = project.edge_functions.get(params.functionSlug);\r\n      if (!edgeFunction) {\r\n        return HttpResponse.json(\r\n          { message: 'Edge Function not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const formData = new FormData();\r\n      for (const file of edgeFunction.files) {\r\n        formData.append('file', file, file.name);\r\n      }\r\n\r\n      return HttpResponse.formData(formData);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Deploys an Edge Function\r\n   */\r\n  http.post<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/functions/deploy`,\r\n    async ({ params, request }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      const formData = await request.formData();\r\n\r\n      const metadataSchema = z.object({\r\n        name: z.string(),\r\n        entrypoint_path: z.string(),\r\n        import_map_path: z.string().optional(),\r\n      });\r\n\r\n      const metadataFormValue = formData.get('metadata');\r\n      const metadataString =\r\n        metadataFormValue instanceof File\r\n          ? await metadataFormValue.text()\r\n          : (metadataFormValue ?? undefined);\r\n\r\n      if (!metadataString) {\r\n        throw new Error('Metadata is required');\r\n      }\r\n\r\n      const metadata = metadataSchema.parse(JSON.parse(metadataString));\r\n\r\n      const fileFormValues = formData.getAll('file');\r\n\r\n      const files = fileFormValues.map((file) => {\r\n        if (typeof file === 'string') {\r\n          throw new Error('Multipart file is a string instead of a File');\r\n        }\r\n        return file;\r\n      });\r\n\r\n      const edgeFunction = await project.deployEdgeFunction(metadata, files);\r\n\r\n      return HttpResponse.json(edgeFunction.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * List migrations for a project\r\n   */\r\n  http.get<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/database/migrations`,\r\n    async ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const { migrations } = project;\r\n      const modified = migrations.map(({ version, name }) => ({\r\n        version,\r\n        name,\r\n      }));\r\n\r\n      return HttpResponse.json(modified);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Create a new migration for a project\r\n   */\r\n  http.post<{ projectId: string }, { name: string; query: string }>(\r\n    `${API_URL}/v1/projects/:projectId/database/migrations`,\r\n    async ({ params, request }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      const { db, migrations } = project;\r\n      const { name, query } = await request.json();\r\n      const [results] = await db.exec(query);\r\n\r\n      if (!results) {\r\n        return HttpResponse.json(\r\n          { message: 'Failed to execute query' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      migrations.push({\r\n        version: format(new Date(), 'yyyyMMddHHmmss'),\r\n        name,\r\n        query,\r\n      });\r\n\r\n      return HttpResponse.json(results.rows);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get logs for a project\r\n   */\r\n  http.get<{ projectId: string }, { sql: string }>(\r\n    `${API_URL}/v1/projects/:projectId/analytics/endpoints/logs.all`,\r\n    async ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json([]);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get security advisors for a project\r\n   */\r\n  http.get<{ projectId: string }, { sql: string }>(\r\n    `${API_URL}/v1/projects/:projectId/advisors/security`,\r\n    async ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({\r\n        lints: [],\r\n      });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get performance advisors for a project\r\n   */\r\n  http.get<{ projectId: string }, { sql: string }>(\r\n    `${API_URL}/v1/projects/:projectId/advisors/performance`,\r\n    async ({ params }) => {\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({\r\n        lints: [],\r\n      });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Create a new branch for a project\r\n   */\r\n  http.post<{ projectId: string }, { branch_name: string }>(\r\n    `${API_URL}/v1/projects/:projectId/branches`,\r\n    async ({ params, request }) => {\r\n      const { branch_name } = await request.json();\r\n\r\n      const project = mockProjects.get(params.projectId);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const projectBranches = Array.from(mockBranches.values()).filter(\r\n        (branch) => branch.parent_project_ref === project.id\r\n      );\r\n\r\n      if (projectBranches.length === 0) {\r\n        // If this is the first branch, set it as the default branch pointing to the same project\r\n        const defaultBranch = new MockBranch({\r\n          name: branch_name,\r\n          project_ref: project.id,\r\n          parent_project_ref: project.id,\r\n          is_default: true,\r\n        });\r\n        defaultBranch.status = 'MIGRATIONS_PASSED';\r\n        mockBranches.set(defaultBranch.id, defaultBranch);\r\n      }\r\n\r\n      const branch = await createBranch({\r\n        name: branch_name,\r\n        parent_project_ref: project.id,\r\n      });\r\n\r\n      return HttpResponse.json(branch.details);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * List all branches for a project\r\n   */\r\n  http.get<{ projectId: string }>(\r\n    `${API_URL}/v1/projects/:projectId/branches`,\r\n    async ({ params }) => {\r\n      const projectBranches = Array.from(mockBranches.values()).filter(\r\n        (branch) => branch.parent_project_ref === params.projectId\r\n      );\r\n\r\n      if (projectBranches.length === 0) {\r\n        return HttpResponse.json(\r\n          { message: 'Preview branching is not enabled for this project.' },\r\n          { status: 422 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json(projectBranches.map((branch) => branch.details));\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get details for a branch\r\n   */\r\n  http.delete<{ branchId: string }>(\r\n    `${API_URL}/v1/branches/:branchId`,\r\n    async ({ params }) => {\r\n      const branch = mockBranches.get(params.branchId);\r\n\r\n      if (!branch) {\r\n        return HttpResponse.json(\r\n          { message: 'Branch not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // if default branch, return error\r\n      if (branch.is_default) {\r\n        return HttpResponse.json(\r\n          { message: 'Cannot delete the default branch.' },\r\n          { status: 422 }\r\n        );\r\n      }\r\n\r\n      const project = mockProjects.get(branch.project_ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      await project.destroy();\r\n      mockProjects.delete(project.id);\r\n      mockBranches.delete(branch.id);\r\n\r\n      return HttpResponse.json({ message: 'ok' });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Merges migrations from a development branch to production\r\n   */\r\n  http.post<{ branchId: string }>(\r\n    `${API_URL}/v1/branches/:branchId/merge`,\r\n    async ({ params }) => {\r\n      const branch = mockBranches.get(params.branchId);\r\n      if (!branch) {\r\n        return HttpResponse.json(\r\n          { message: 'Branch not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const parentProject = mockProjects.get(branch.parent_project_ref);\r\n      if (!parentProject) {\r\n        return HttpResponse.json(\r\n          { message: 'Parent project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const project = mockProjects.get(branch.project_ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // Simulate merge by resetting the parent DB and running branch migrations\r\n      parentProject.migrations = [...project.migrations];\r\n      await parentProject.resetDb();\r\n      try {\r\n        await parentProject.applyMigrations();\r\n      } catch (error) {\r\n        return HttpResponse.json(\r\n          { message: 'Failed to apply migrations' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({ message: 'ok' });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Resets a branch and re-runs migrations\r\n   */\r\n  http.post<{ branchId: string }, { migration_version?: string }>(\r\n    `${API_URL}/v1/branches/:branchId/reset`,\r\n    async ({ params, request }) => {\r\n      const branch = mockBranches.get(params.branchId);\r\n      if (!branch) {\r\n        return HttpResponse.json(\r\n          { message: 'Branch not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const project = mockProjects.get(branch.project_ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // Clear migrations below the specified version\r\n      const body = await request.json();\r\n      if (body.migration_version) {\r\n        const target = body.migration_version;\r\n        project.migrations = project.migrations.filter(\r\n          (m) => m.version <= target\r\n        );\r\n      }\r\n\r\n      // Reset the DB a re-run migrations\r\n      await project.resetDb();\r\n      try {\r\n        await project.applyMigrations();\r\n        branch.status = 'MIGRATIONS_PASSED';\r\n      } catch (error) {\r\n        branch.status = 'MIGRATIONS_FAILED';\r\n        return HttpResponse.json(\r\n          { message: 'Failed to apply migrations' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({ message: 'ok' });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Rebase migrations from production on a development branch\r\n   */\r\n  http.post<{ branchId: string }>(\r\n    `${API_URL}/v1/branches/:branchId/push`,\r\n    async ({ params }) => {\r\n      const branch = mockBranches.get(params.branchId);\r\n      if (!branch) {\r\n        return HttpResponse.json(\r\n          { message: 'Branch not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const parentProject = mockProjects.get(branch.parent_project_ref);\r\n      if (!parentProject) {\r\n        return HttpResponse.json(\r\n          { message: 'Parent project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const project = mockProjects.get(branch.project_ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // Simulate rebase by resetting the branch DB and running production migrations\r\n      project.migrations = [...parentProject.migrations];\r\n      await project.resetDb();\r\n      try {\r\n        await project.applyMigrations();\r\n        branch.status = 'MIGRATIONS_PASSED';\r\n      } catch (error) {\r\n        branch.status = 'MIGRATIONS_FAILED';\r\n        return HttpResponse.json(\r\n          { message: 'Failed to apply migrations' },\r\n          { status: 500 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({ message: 'ok' });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * List storage buckets\r\n   */\r\n  http.get<{ ref: string }>(\r\n    `${API_URL}/v1/projects/:ref/storage/buckets`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      const buckets = Array.from(project.storage_buckets.values()).map(\r\n        (bucket) => ({\r\n          id: bucket.id,\r\n          name: bucket.name,\r\n          public: bucket.public,\r\n          created_at: bucket.created_at.toISOString(),\r\n          updated_at: bucket.updated_at.toISOString(),\r\n        })\r\n      );\r\n\r\n      return HttpResponse.json(buckets);\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Get storage config\r\n   */\r\n  http.get<{ ref: string }>(\r\n    `${API_URL}/v1/projects/:ref/config/storage`,\r\n    ({ params }) => {\r\n      const project = mockProjects.get(params.ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      return HttpResponse.json({\r\n        fileSizeLimit: 50,\r\n        features: {\r\n          imageTransformation: { enabled: true },\r\n          s3Protocol: { enabled: false },\r\n        },\r\n      });\r\n    }\r\n  ),\r\n\r\n  /**\r\n   * Update storage config\r\n   */\r\n  http.patch<{ ref: string }>(\r\n    `${API_URL}/v1/projects/:ref/config/storage`,\r\n    async ({ params, request }) => {\r\n      const project = mockProjects.get(params.ref);\r\n      if (!project) {\r\n        return HttpResponse.json(\r\n          { message: 'Project not found' },\r\n          { status: 404 }\r\n        );\r\n      }\r\n\r\n      // Accept any valid config\r\n      try {\r\n        await request.json();\r\n        return new HttpResponse(null, { status: 204 });\r\n      } catch (e) {\r\n        return HttpResponse.json(\r\n          { message: 'Invalid request body' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n  ),\r\n];\r\n\r\nexport async function createOrganization(options: MockOrganizationOptions) {\r\n  const org = new MockOrganization(options);\r\n  mockOrgs.set(org.id, org);\r\n  return org;\r\n}\r\n\r\nexport async function createProject(options: MockProjectOptions) {\r\n  const project = new MockProject(options);\r\n\r\n  mockProjects.set(project.id, project);\r\n\r\n  // Change the project status to ACTIVE_HEALTHY after a delay\r\n  setTimeout(async () => {\r\n    project.status = 'ACTIVE_HEALTHY';\r\n  }, 0);\r\n\r\n  return project;\r\n}\r\n\r\nexport async function createBranch(options: {\r\n  name: string;\r\n  parent_project_ref: string;\r\n}) {\r\n  const parentProject = mockProjects.get(options.parent_project_ref);\r\n  if (!parentProject) {\r\n    throw new Error(`Project with id ${options.parent_project_ref} not found`);\r\n  }\r\n\r\n  const project = new MockProject({\r\n    name: `${parentProject.name} - ${options.name}`,\r\n    region: parentProject.region,\r\n    organization_id: parentProject.organization_id,\r\n  });\r\n\r\n  const branch = new MockBranch({\r\n    name: options.name,\r\n    project_ref: project.id,\r\n    parent_project_ref: options.parent_project_ref,\r\n    is_default: false,\r\n  });\r\n\r\n  mockProjects.set(project.id, project);\r\n  mockBranches.set(branch.id, branch);\r\n\r\n  project.migrations = [...parentProject.migrations];\r\n\r\n  // Run migrations on the new branch in the background\r\n  setTimeout(async () => {\r\n    try {\r\n      await project.applyMigrations();\r\n      branch.status = 'MIGRATIONS_PASSED';\r\n    } catch (error) {\r\n      branch.status = 'MIGRATIONS_FAILED';\r\n      console.error('Migration error:', error);\r\n    }\r\n  }, 0);\r\n\r\n  return branch;\r\n}\r\n\r\nexport type MockOrganizationOptions = {\r\n  name: Organization['name'];\r\n  plan: Organization['plan'];\r\n  allowed_release_channels: Organization['allowed_release_channels'];\r\n  opt_in_tags?: Organization['opt_in_tags'];\r\n};\r\n\r\nexport class MockOrganization {\r\n  id: string;\r\n  name: Organization['name'];\r\n  plan: Organization['plan'];\r\n  allowed_release_channels: Organization['allowed_release_channels'];\r\n  opt_in_tags: Organization['opt_in_tags'];\r\n\r\n  get details(): Organization {\r\n    return {\r\n      id: this.id,\r\n      name: this.name,\r\n      plan: this.plan,\r\n      allowed_release_channels: this.allowed_release_channels,\r\n      opt_in_tags: this.opt_in_tags,\r\n    };\r\n  }\r\n\r\n  constructor(options: MockOrganizationOptions) {\r\n    this.id = nanoid();\r\n    this.name = options.name;\r\n    this.plan = options.plan;\r\n    this.allowed_release_channels = options.allowed_release_channels;\r\n    this.opt_in_tags = options.opt_in_tags ?? [];\r\n  }\r\n}\r\n\r\nexport type MockEdgeFunctionOptions = {\r\n  name: string;\r\n  entrypoint_path: string;\r\n  import_map_path?: string;\r\n};\r\n\r\nexport class MockEdgeFunction {\r\n  projectId: string;\r\n  id: string;\r\n  slug: string;\r\n  version: number;\r\n  name: string;\r\n  status: 'ACTIVE' | 'REMOVED' | 'THROTTLED';\r\n  entrypoint_path: string;\r\n  import_map_path?: string;\r\n  import_map: boolean;\r\n  verify_jwt: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n\r\n  files: File[] = [];\r\n\r\n  async setFiles(files: File[]) {\r\n    this.files = [];\r\n    for (const file of files) {\r\n      this.files.push(\r\n        new File([file], `${join(this.pathPrefix, file.name)}`, {\r\n          type: file.type,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  get deploymentId() {\r\n    return getDeploymentId(this.projectId, this.id, this.version);\r\n  }\r\n\r\n  get pathPrefix() {\r\n    return getPathPrefix(this.deploymentId);\r\n  }\r\n\r\n  get details() {\r\n    return {\r\n      id: this.id,\r\n      slug: this.slug,\r\n      version: this.version,\r\n      name: this.name,\r\n      status: this.status,\r\n      entrypoint_path: this.entrypoint_path,\r\n      import_map_path: this.import_map_path,\r\n      import_map: this.import_map,\r\n      verify_jwt: this.verify_jwt,\r\n      created_at: this.created_at.toISOString(),\r\n      updated_at: this.updated_at.toISOString(),\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    projectId: string,\r\n    { name, entrypoint_path, import_map_path }: MockEdgeFunctionOptions\r\n  ) {\r\n    this.projectId = projectId;\r\n    this.id = crypto.randomUUID();\r\n    this.slug = name;\r\n    this.version = 1;\r\n    this.name = name;\r\n    this.status = 'ACTIVE';\r\n    this.entrypoint_path = `file://${join(this.pathPrefix, entrypoint_path)}`;\r\n    this.import_map_path = import_map_path\r\n      ? `file://${join(this.pathPrefix, import_map_path)}`\r\n      : undefined;\r\n    this.import_map = !!import_map_path;\r\n    this.verify_jwt = true;\r\n    this.created_at = new Date();\r\n    this.updated_at = new Date();\r\n  }\r\n\r\n  update({ name, entrypoint_path, import_map_path }: MockEdgeFunctionOptions) {\r\n    this.name = name;\r\n    this.version += 1;\r\n    this.entrypoint_path = `file://${join(this.pathPrefix, entrypoint_path)}`;\r\n    this.import_map_path = import_map_path\r\n      ? `file://${join(this.pathPrefix, import_map_path)}`\r\n      : undefined;\r\n    this.import_map = !!import_map_path;\r\n    this.updated_at = new Date();\r\n  }\r\n}\r\n\r\nexport type MockStorageBucketOptions = {\r\n  name: string;\r\n  isPublic: boolean;\r\n};\r\n\r\nexport class MockStorageBucket {\r\n  id: string;\r\n  name: string;\r\n  public: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n\r\n  constructor({ name, isPublic }: MockStorageBucketOptions) {\r\n    this.id = crypto.randomUUID();\r\n    this.name = name;\r\n    this.public = isPublic;\r\n    this.created_at = new Date();\r\n    this.updated_at = new Date();\r\n  }\r\n}\r\n\r\nexport type MockProjectOptions = {\r\n  name: string;\r\n  region: string;\r\n  organization_id: string;\r\n};\r\n\r\nexport class MockProject {\r\n  id: string;\r\n  organization_id: string;\r\n  name: string;\r\n  region: string;\r\n  created_at: Date;\r\n  status: Project['status'];\r\n  database: {\r\n    host: string;\r\n    version: string;\r\n    postgres_engine: string;\r\n    release_channel: string;\r\n  };\r\n\r\n  migrations: Migration[] = [];\r\n  edge_functions = new Map<string, MockEdgeFunction>();\r\n  storage_buckets = new Map<string, MockStorageBucket>();\r\n\r\n  #db?: PGliteInterface;\r\n\r\n  // Lazy load the database connection\r\n  get db() {\r\n    if (!this.#db) {\r\n      this.#db = new PGlite();\r\n      this.#db.waitReady.then(() => {\r\n        this.#db!.exec(`\r\n          CREATE ROLE supabase_read_only_role;\r\n          GRANT pg_read_all_data TO supabase_read_only_role;\r\n        `);\r\n      });\r\n    }\r\n    return this.#db;\r\n  }\r\n\r\n  get details(): Project {\r\n    return {\r\n      id: this.id,\r\n      organization_id: this.organization_id,\r\n      name: this.name,\r\n      region: this.region,\r\n      created_at: this.created_at.toISOString(),\r\n      status: this.status,\r\n      database: this.database,\r\n    };\r\n  }\r\n\r\n  constructor({ name, region, organization_id }: MockProjectOptions) {\r\n    this.id = nanoid();\r\n\r\n    this.name = name;\r\n    this.region = region;\r\n    this.organization_id = organization_id;\r\n\r\n    this.created_at = new Date();\r\n    this.status = 'UNKNOWN';\r\n    this.database = {\r\n      host: `db.${this.id}.supabase.co`,\r\n      version: '15.1',\r\n      postgres_engine: '15',\r\n      release_channel: 'ga',\r\n    };\r\n  }\r\n\r\n  async applyMigrations() {\r\n    for (const migration of this.migrations) {\r\n      const [results] = await this.db.exec(migration.query);\r\n      if (!results) {\r\n        throw new Error(`Failed to execute migration ${migration.name}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async resetDb() {\r\n    if (this.#db) {\r\n      await this.#db.close();\r\n    }\r\n    this.#db = undefined;\r\n    return this.db;\r\n  }\r\n\r\n  async deployEdgeFunction(\r\n    options: MockEdgeFunctionOptions,\r\n    files: File[] = []\r\n  ) {\r\n    const edgeFunction = new MockEdgeFunction(this.id, options);\r\n    const existingFunction = this.edge_functions.get(edgeFunction.slug);\r\n\r\n    if (existingFunction) {\r\n      existingFunction.update(options);\r\n      await existingFunction.setFiles(files);\r\n      return existingFunction;\r\n    }\r\n\r\n    await edgeFunction.setFiles(files);\r\n    this.edge_functions.set(edgeFunction.slug, edgeFunction);\r\n\r\n    return edgeFunction;\r\n  }\r\n\r\n  async destroy() {\r\n    if (this.#db) {\r\n      await this.#db.close();\r\n    }\r\n  }\r\n\r\n  createStorageBucket(\r\n    name: string,\r\n    isPublic: boolean = false\r\n  ): MockStorageBucket {\r\n    const id = nanoid();\r\n    const bucket: MockStorageBucket = {\r\n      id,\r\n      name,\r\n      public: isPublic,\r\n      created_at: new Date(),\r\n      updated_at: new Date(),\r\n    };\r\n\r\n    this.storage_buckets.set(id, bucket);\r\n    return bucket;\r\n  }\r\n}\r\n\r\nexport type MockBranchOptions = {\r\n  name: string;\r\n  project_ref: string;\r\n  parent_project_ref: string;\r\n  is_default: boolean;\r\n};\r\n\r\nexport class MockBranch {\r\n  id: string;\r\n  name: string;\r\n  project_ref: string;\r\n  parent_project_ref: string;\r\n  is_default: boolean;\r\n  persistent: boolean;\r\n  status: Branch['status'];\r\n  created_at: Date;\r\n  updated_at: Date;\r\n\r\n  get details(): Branch {\r\n    return {\r\n      id: this.id,\r\n      name: this.name,\r\n      project_ref: this.project_ref,\r\n      parent_project_ref: this.parent_project_ref,\r\n      is_default: this.is_default,\r\n      persistent: this.persistent,\r\n      status: this.status,\r\n      created_at: this.created_at.toISOString(),\r\n      updated_at: this.updated_at.toISOString(),\r\n    };\r\n  }\r\n\r\n  constructor({\r\n    name,\r\n    project_ref,\r\n    parent_project_ref,\r\n    is_default,\r\n  }: MockBranchOptions) {\r\n    this.id = nanoid();\r\n    this.name = name;\r\n    this.project_ref = project_ref;\r\n    this.parent_project_ref = parent_project_ref;\r\n    this.is_default = is_default;\r\n    this.persistent = false;\r\n    this.status = 'CREATING_PROJECT';\r\n    this.created_at = new Date();\r\n    this.updated_at = new Date();\r\n  }\r\n}\r\n"]}