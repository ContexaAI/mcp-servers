[
    {
      "name": "API-search-global",
      "description": "Search objects across all spaces\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          },
          "query": {
            "type": "string",
            "description": "The text to search within object names and content; use types field for type filtering"
          },
          "sort": {
            "type": "object",
            "description": "The sorting options for the search results",
            "properties": {
              "direction": {
                "type": "string",
                "description": "The direction to sort the search results by",
                "enum": ["asc", "desc"],
                "default": "desc"
              },
              "property_key": {
                "type": "string",
                "description": "The key of the property to sort the search results by",
                "enum": ["created_date", "last_modified_date", "last_opened_date", "name"],
                "default": "last_modified_date"
              }
            },
            "additionalProperties": true
          },
          "types": {
            "type": "array",
            "description": "The types of objects to include in results (e.g., \"page\", \"task\", \"bookmark\"); see ListTypes endpoint for valid values",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [],
        "$defs": {}
      }
    },
    {
      "name": "API-list-spaces",
      "description": "List spaces\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": [],
        "$defs": {}
      }
    },
    {
      "name": "API-create-space",
      "description": "Create space\nError Responses:\n400: Bad request\n401: Unauthorized\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the space"
          },
          "name": {
            "type": "string",
            "description": "The name of the space"
          }
        },
        "required": ["name"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-space",
      "description": "Get space\nError Responses:\n401: Unauthorized\n404: Space not found\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to retrieve; must be retrieved from ListSpaces endpoint"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-update-space",
      "description": "Update space\nError Responses:\n400: Bad request\n401: Unauthorized\n403: Forbidden\n404: Space not found\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to update; must be retrieved from ListSpaces endpoint"
          },
          "description": {
            "type": "string",
            "description": "The description of the space"
          },
          "name": {
            "type": "string",
            "description": "The name of the space"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-add-list-objects",
      "description": "Add objects to list\nError Responses:\n400: Bad request\n401: Unauthorized\n404: Not found\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the list belongs; must be retrieved from ListSpaces endpoint"
          },
          "list_id": {
            "type": "string",
            "description": "The ID of the list to which objects will be added; must be retrieved from SearchSpace endpoint with types: ['collection', 'set']"
          },
          "objects": {
            "type": "array",
            "description": "The list of object IDs to add to the list",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["space_id", "list_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-list-views",
      "description": "Get list views\nError Responses:\n401: Unauthorized\n404: Not found\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the list belongs; must be retrieved from ListSpaces endpoint"
          },
          "list_id": {
            "type": "string",
            "description": "The ID of the list to retrieve views for; must be retrieved from SearchSpace endpoint with types: ['collection', 'set']"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "description": "The number of items to return"
          }
        },
        "required": ["space_id", "list_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-list-objects",
      "description": "Get objects in list\nError Responses:\n401: Unauthorized\n404: Not found\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the list belongs; must be retrieved from ListSpaces endpoint"
          },
          "list_id": {
            "type": "string",
            "description": "The ID of the list to retrieve objects for; must be retrieved from SearchSpace endpoint with types: ['collection', 'set']"
          },
          "view_id": {
            "type": "string",
            "description": "The ID of the view to retrieve objects for; must be retrieved from ListViews endpoint or omitted if you want to get all objects in the list"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "description": "The number of items to return"
          }
        },
        "required": ["space_id", "list_id", "view_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-members",
      "description": "List members\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to list members for; must be retrieved from ListSpaces endpoint"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-member",
      "description": "Get member\nError Responses:\n401: Unauthorized\n404: Member not found\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to get the member from; must be retrieved from ListSpaces endpoint"
          },
          "member_id": {
            "type": "string",
            "description": "Member ID or Identity; must be retrieved from ListMembers endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "member_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-objects",
      "description": "List objects\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which to list objects; must be retrieved from ListSpaces endpoint"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-create-object",
      "description": "Create object\nError Responses:\n400: Bad request\n401: Unauthorized\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which to create the object; must be retrieved from ListSpaces endpoint"
          },
          "body": {
            "type": "string",
            "description": "The body of the object"
          },
          "icon": {
            "type": "object",
            "description": "The icon of the object",
            "properties": {
              "emoji": {
                "type": "string",
                "description": "The emoji of the icon"
              },
              "format": {
                "type": "string",
                "description": "The format of the icon",
                "enum": ["emoji"]
              }
            },
            "additionalProperties": true
          },
          "name": {
            "type": "string",
            "description": "The name of the object"
          },
          "properties": {
            "type": "array",
            "description": "⚠ Warning: Properties are experimental and may change in the next update. ⚠ The properties to set on the object; see ListTypes or GetType endpoints for linked properties",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the property",
                  "examples": ["last_modified_date"]
                },
                "text": {
                  "type": "string",
                  "description": "The text value, if applicable",
                  "examples": ["Some text..."]
                },
                "number": {
                  "type": "number",
                  "description": "The number value, if applicable",
                  "examples": [42]
                },
                "select": {
                  "type": "string",
                  "description": "The selected tag id, if applicable",
                  "examples": ["tag_id"]
                },
                "multi_select": {
                  "type": "array",
                  "description": "The selected tag ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["tag_id"]]
                },
                "date": {
                  "type": "string",
                  "description": "The date value in ISO 8601 format, if applicable",
                  "examples": ["2025-02-14T12:34:56Z"]
                },
                "files": {
                  "type": "array",
                  "description": "The file ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["['file_id']"]]
                },
                "checkbox": {
                  "type": "boolean",
                  "description": "The checkbox value, if applicable",
                  "examples": [true]
                },
                "url": {
                  "type": "string",
                  "description": "The url value, if applicable",
                  "examples": ["https://example.com"]
                },
                "email": {
                  "type": "string",
                  "description": "The email value, if applicable",
                  "examples": ["example@example.com"]
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number value, if applicable",
                  "examples": ["+1234567890"]
                },
                "objects": {
                  "type": "array",
                  "description": "The object ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["['object_id']"]]
                }
              }
            }
          },
          "template_id": {
            "type": "string",
            "description": "The id of the template to use"
          },
          "type_key": {
            "type": "string",
            "description": "The key of the type of object to create"
          }
        },
        "required": ["space_id", "type_key"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-object",
      "description": "Get object\nError Responses:\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which the object exists; must be retrieved from ListSpaces endpoint"
          },
          "object_id": {
            "type": "string",
            "description": "The ID of the object to retrieve; must be retrieved from ListObjects, SearchSpace or GlobalSearch endpoints or obtained from response context"
          },
          "format": {
            "type": "string",
            "enum": ["md"],
            "default": "\"md\"",
            "description": "The format to return the object body in"
          }
        },
        "required": ["space_id", "object_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-update-object",
      "description": "Update object\nError Responses:\n400: Bad request\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which the object exists; must be retrieved from ListSpaces endpoint"
          },
          "object_id": {
            "type": "string",
            "description": "The ID of the object to update; must be retrieved from ListObjects, SearchSpace or GlobalSearch endpoints or obtained from response context"
          },
          "icon": {
            "type": "object",
            "description": "The icon of the object",
            "properties": {
              "emoji": {
                "type": "string",
                "description": "The emoji of the icon"
              },
              "format": {
                "type": "string",
                "description": "The format of the icon",
                "enum": ["emoji"]
              }
            },
            "additionalProperties": true
          },
          "name": {
            "type": "string",
            "description": "The name of the object"
          },
          "properties": {
            "type": "array",
            "description": "⚠ Warning: Properties are experimental and may change in the next update. ⚠ The properties to set for the object; see ListTypes or GetType endpoints for linked properties",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the property",
                  "examples": ["last_modified_date"]
                },
                "text": {
                  "type": "string",
                  "description": "The text value, if applicable",
                  "examples": ["Some text..."]
                },
                "number": {
                  "type": "number",
                  "description": "The number value, if applicable",
                  "examples": [42]
                },
                "select": {
                  "type": "string",
                  "description": "The selected tag id, if applicable",
                  "examples": ["tag_id"]
                },
                "multi_select": {
                  "type": "array",
                  "description": "The selected tag ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["tag_id"]]
                },
                "date": {
                  "type": "string",
                  "description": "The date value in ISO 8601 format, if applicable",
                  "examples": ["2025-02-14T12:34:56Z"]
                },
                "files": {
                  "type": "array",
                  "description": "The file ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["['file_id']"]]
                },
                "checkbox": {
                  "type": "boolean",
                  "description": "The checkbox value, if applicable",
                  "examples": [true]
                },
                "url": {
                  "type": "string",
                  "description": "The url value, if applicable",
                  "examples": ["https://example.com"]
                },
                "email": {
                  "type": "string",
                  "description": "The email value, if applicable",
                  "examples": ["example@example.com"]
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number value, if applicable",
                  "examples": ["+1234567890"]
                },
                "objects": {
                  "type": "array",
                  "description": "The object ids, if applicable",
                  "items": {
                    "type": "string"
                  },
                  "examples": [["['object_id']"]]
                }
              }
            }
          }
        },
        "required": ["space_id", "object_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-properties",
      "description": "List properties\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to list properties for; must be retrieved from ListSpaces endpoint"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-create-property",
      "description": "Create property\nError Responses:\n400: Bad request\n401: Unauthorized\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to create the property in; must be retrieved from ListSpaces endpoint"
          },
          "format": {
            "type": "string",
            "description": "The format of the property used for filtering",
            "enum": ["text", "number", "select", "multi_select", "date", "files", "checkbox", "url", "email", "phone", "objects"]
          },
          "key": {
            "type": "string",
            "description": "The key of the property; should always be snake_case, otherwise it will be converted to snake_case"
          },
          "name": {
            "type": "string",
            "description": "The name of the property"
          }
        },
        "required": ["space_id", "format", "name"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-property",
      "description": "Get property\nError Responses:\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the property belongs; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to retrieve; must be retrieved from ListProperties endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "property_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-update-property",
      "description": "Update property\nError Responses:\n400: Bad request\n401: Unauthorized\n403: Forbidden\n404: Resource not found\n410: Resource deleted\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the property belongs; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to update; must be retrieved from ListProperties endpoint or obtained from response context"
          },
          "key": {
            "type": "string",
            "description": "The key to set for the property; ; should always be snake_case, otherwise it will be converted to snake_case"
          },
          "name": {
            "type": "string",
            "description": "The name to set for the property"
          }
        },
        "required": ["space_id", "property_id", "name"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-tags",
      "description": "List tags\nError Responses:\n401: Unauthorized\n404: Property not found\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to list tags for; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to list tags for; must be retrieved from ListProperties endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "property_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-create-tag",
      "description": "Create tag\nError Responses:\n400: Bad request\n401: Unauthorized\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to create the tag in; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to create the tag for; must be retrieved from ListProperties endpoint or obtained from response context"
          },
          "color": {
            "type": "string",
            "description": "The color of the icon",
            "enum": ["grey", "yellow", "orange", "red", "pink", "purple", "blue", "ice", "teal", "lime"]
          },
          "name": {
            "type": "string",
            "description": "The name of the tag"
          }
        },
        "required": ["space_id", "property_id", "color", "name"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-tag",
      "description": "Get tag\nError Responses:\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to retrieve the tag from; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to retrieve the tag for; must be retrieved from ListProperties endpoint or obtained from response context"
          },
          "tag_id": {
            "type": "string",
            "description": "The ID of the tag to retrieve; must be retrieved from ListTags endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "property_id", "tag_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-update-tag",
      "description": "Update tag\nError Responses:\n400: Bad request\n401: Unauthorized\n403: Forbidden\n404: Resource not found\n410: Resource deleted\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to update the tag in; must be retrieved from ListSpaces endpoint"
          },
          "property_id": {
            "type": "string",
            "description": "The ID of the property to update the tag for; must be retrieved from ListProperties endpoint or obtained from response context"
          },
          "tag_id": {
            "type": "string",
            "description": "The ID of the tag to update; must be retrieved from ListTags endpoint or obtained from response context"
          },
          "color": {
            "type": "string",
            "description": "The color of the icon",
            "enum": ["grey", "yellow", "orange", "red", "pink", "purple", "blue", "ice", "teal", "lime"]
          },
          "name": {
            "type": "string",
            "description": "The name to set for the tag"
          }
        },
        "required": ["space_id", "property_id", "tag_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-search-space",
      "description": "Search objects within a space\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to search in; must be retrieved from ListSpaces endpoint"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          },
          "query": {
            "type": "string",
            "description": "The text to search within object names and content; use types field for type filtering"
          },
          "sort": {
            "type": "object",
            "description": "The sorting options for the search results",
            "properties": {
              "direction": {
                "type": "string",
                "description": "The direction to sort the search results by",
                "enum": ["asc", "desc"],
                "default": "desc"
              },
              "property_key": {
                "type": "string",
                "description": "The key of the property to sort the search results by",
                "enum": ["created_date", "last_modified_date", "last_opened_date", "name"],
                "default": "last_modified_date"
              }
            },
            "additionalProperties": true
          },
          "types": {
            "type": "array",
            "description": "The types of objects to include in results (e.g., \"page\", \"task\", \"bookmark\"); see ListTypes endpoint for valid values",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-types",
      "description": "List types\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to retrieve types from; must be retrieved from ListSpaces endpoint"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": ["space_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-create-type",
      "description": "Create type\nError Responses:\n400: Bad request\n401: Unauthorized\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which to create the type; must be retrieved from ListSpaces endpoint"
          },
          "icon": {
            "type": "object",
            "description": "The icon of the object",
            "properties": {
              "emoji": {
                "type": "string",
                "description": "The emoji of the icon"
              },
              "format": {
                "type": "string",
                "description": "The format of the icon",
                "enum": ["emoji"]
              }
            },
            "additionalProperties": true
          },
          "key": {
            "type": "string",
            "description": "The key of the type; should always be snake_case, otherwise it will be converted to snake_case"
          },
          "layout": {
            "type": "string",
            "description": "The layout of the type",
            "enum": ["basic", "profile", "action", "note"]
          },
          "name": {
            "type": "string",
            "description": "The name of the type"
          },
          "plural_name": {
            "type": "string",
            "description": "The plural name of the type"
          },
          "properties": {
            "type": "array",
            "description": "⚠ Warning: Properties are experimental and may change in the next update. ⚠ The properties linked to the type",
            "items": {
              "type": "object",
              "properties": {
                "format": {
                  "type": "string",
                  "description": "The format of the property used for filtering",
                  "enum": ["text", "number", "select", "multi_select", "date", "files", "checkbox", "url", "email", "phone", "objects"]
                },
                "key": {
                  "type": "string",
                  "description": "The key of the property"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the property"
                }
              },
              "required": ["format", "key", "name"],
              "additionalProperties": true
            }
          }
        },
        "required": ["space_id", "layout", "name", "plural_name"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-type",
      "description": "Get type\nError Responses:\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space from which to retrieve the type; must be retrieved from ListSpaces endpoint"
          },
          "type_id": {
            "type": "string",
            "description": "The ID of the type to retrieve; must be retrieved from ListTypes endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "type_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-update-type",
      "description": "Update type\nError Responses:\n400: Bad request\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n429: Rate limit exceeded\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space in which the type exists; must be retrieved from ListSpaces endpoint"
          },
          "type_id": {
            "type": "string",
            "description": "The ID of the type to update; must be retrieved from ListTypes endpoint or obtained from response context"
          },
          "icon": {
            "type": "object",
            "description": "The icon of the object",
            "properties": {
              "emoji": {
                "type": "string",
                "description": "The emoji of the icon"
              },
              "format": {
                "type": "string",
                "description": "The format of the icon",
                "enum": ["emoji"]
              }
            },
            "additionalProperties": true
          },
          "key": {
            "type": "string",
            "description": "The key to set for the type; should always be snake_case, otherwise it will be converted to snake_case"
          },
          "layout": {
            "type": "string",
            "description": "The layout of the type",
            "enum": ["basic", "profile", "action", "note"]
          },
          "name": {
            "type": "string",
            "description": "The name to set for the type"
          },
          "plural_name": {
            "type": "string",
            "description": "The plural name to set for the type"
          },
          "properties": {
            "type": "array",
            "description": "⚠ Warning: Properties are experimental and may change in the next update. ⚠ The properties to set for the type",
            "items": {
              "type": "object",
              "properties": {
                "format": {
                  "type": "string",
                  "description": "The format of the property used for filtering",
                  "enum": ["text", "number", "select", "multi_select", "date", "files", "checkbox", "url", "email", "phone", "objects"]
                },
                "key": {
                  "type": "string",
                  "description": "The key of the property"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the property"
                }
              },
              "required": ["format", "key", "name"],
              "additionalProperties": true
            }
          }
        },
        "required": ["space_id", "type_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-list-templates",
      "description": "List templates\nError Responses:\n401: Unauthorized\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the type belongs; must be retrieved from ListSpaces endpoint"
          },
          "type_id": {
            "type": "string",
            "description": "The ID of the type to retrieve templates for; must be retrieved from ListTypes endpoint or obtained from response context"
          },
          "offset": {
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set"
          },
          "limit": {
            "type": "integer",
            "default": 100,
            "description": "The number of items to return"
          }
        },
        "required": ["space_id", "type_id"],
        "$defs": {}
      }
    },
    {
      "name": "API-get-template",
      "description": "Get template\nError Responses:\n401: Unauthorized\n404: Resource not found\n410: Resource deleted\n500: Internal server error",
      "inputSchema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "The ID of the space to which the template belongs; must be retrieved from ListSpaces endpoint"
          },
          "type_id": {
            "type": "string",
            "description": "The ID of the type to which the template belongs; must be retrieved from ListTypes endpoint or obtained from response context"
          },
          "template_id": {
            "type": "string",
            "description": "The ID of the template to retrieve; must be retrieved from ListTemplates endpoint or obtained from response context"
          }
        },
        "required": ["space_id", "type_id", "template_id"],
        "$defs": {}
      }
    }
  ]